generator bit expBool(int nvars, int nconsts, int bnd, int[nvars] vars, int[nconsts] consts){
    //In this generator, nvars is the number of variables and nconsts is the number of constants.
    //the array vars contains the values of all the variables and the array consts of all the constants.
    //Note that unlike problem 1, where you were generating ASTs, here you are synthesizing the actual function.
    if (bnd == 0) {
        return false;
    }
    int t = ??;
    if (t ==0) {
        return false;
    }
    if (t ==1) {
        bit b = expBool(nvars, nconsts, (bnd-1), vars, consts);
        return !b;
    }
    if (t ==2) {
        bit a1 = expBool(nvars, nconsts, bnd-1, vars, consts);
        bit a2 = expBool(nvars, nconsts, bnd-1, vars, consts);
        return a1 < a2;
    }
    if (t ==3) {
        bit a1 = expBool(nvars, nconsts, bnd-1, vars, consts);
        bit a2 = expBool(nvars, nconsts, bnd-1, vars, consts);
        return a1 && a2;
    }
}

generator int expInt(int nvars, int nconsts, int bnd, int[nvars] vars, int[nconsts] consts){
    //In this generator, nvars is the number of variables and nconsts is the number of constants.
    //the array vars contains the values of all the variables and the array consts of all the constants.
    //Note that unlike problem 1, where you were generating ASTs, here you are synthesizing the actual function.
    //Also note that you will probably need a separate generator for the boolean expressions.
    if (bnd == 0) {
        int nconstant = ??;
        return consts[nconstant];
    }
    int t = ??;
    if (t == 0) {
        int nconstant = ??;
        return consts[nconstant];
    }
    if (t == 1) {
        int nvar = ??;
        return vars[nvar];
    }
    if (t == 2) {
        int a1 = expInt(nvars, nconsts, bnd-1, vars, consts);
        int a2 = expInt(nvars, nconsts, bnd-1, vars, consts);
        return a1 + a2;
    }
    if (t == 3) {
        int a1 = expInt(nvars, nconsts, bnd-1, vars, consts);
        int a2 = expInt(nvars, nconsts, bnd-1, vars, consts);
        return a1 * a2;
    }
    if (t == 4) {
        bit b = expBool(nvars, nconsts, bnd-1, vars, consts);
        int a1 = expInt(nvars, nconsts, bnd-1, vars, consts);
        int a2 = expInt(nvars, nconsts, bnd-1, vars, consts);
        return b ? a1:a2;
    }
}

void aux(int x, int y, int out) {
    int[3] c;
    c[0] = -1;
    c[1] = 0;
    c[2] = 1;
    int[2] nvars;
    nvars[0] = x;
    nvars[1] = y;
    assert expInt(2, 3, 3, nvars, c) == out;
}

// This works!
harness void experiment1(){
    //Use this harness for the example from 1.b
    //Assume that x is the first variable and y is the second variable, so the
    //input x=8 and y=3, for example will correspond to an array {8,3}.
    aux(5, 5, 15);
    aux(8, 3, 14);
    aux(1234, 227, 1688);
}


// This part Sketch couldn't resolve it
/*
harness void experiment2(){
    //Use this harness for the example from 1.e
    //Assume that x is the first variable and y is the second variable, so the
    //input x=10 and y=7, for example will correspond to an array {10,7}.
    aux(10, 7, 17);
    aux(4, 7, -7);
    aux(10, 3, 13);
    aux(1, -7, -6);
    aux(1, 8, -8);
}
*/
